package com.functionalprogramming

import org.specs2.mutable.Specification

class Chapter5Spec extends Specification {

  sequential

  "headOption" in {
    "returns some value for non-empty stream" in {
      Stream(1,2,3).headOption mustEqual Some(1)
    }

    "returns none for empty stream" in {
      Stream.empty.headOption mustEqual None
    }
  }

  "5.1" in {
    "toList" in {
      "transforms non-empty stream into a list" in {
        Stream(3, 2, 1).toList mustEqual List(3, 2, 1)
      }

      "transforms empty stream into a empty list" in {
        Stream().toList mustEqual List()
      }
    }
  }

  "5.2" in {
    "take n" in {
      "takes the first n elements of the stream" in {
        Stream(5,4,3,2,1).take(3).toList mustEqual List(5,4,3)
      }

      "takes stream length elements of the stream when n is greater than stream length" in {
        Stream(5,4).take(3).toList mustEqual List(5,4)
      }
    }

    "drop n" in {
      "drops the first n elements of the stream" in {
        Stream(5,4,3,2,1).drop(3).toList mustEqual List(2,1)
      }

      "drops all elements when n is greater than stream length" in {
        Stream(5,4).drop(3).toList mustEqual List()
      }
    }
  }

  "5.3" in {
    "takeWhile" in {
      "returns all the first elements that match the given predicate" in {
        Stream(10,8,6,4,3,2,1).takeWhile(_ % 2 == 0).toList mustEqual List(10,8,6,4)
      }

      "returns empty stream when the first element does not match the given predicate" in {
        Stream(3,10,8,6,4,2).takeWhile(_ % 2 == 0).toList mustEqual List()
      }
    }
  }

  "5.4" in {
    "forAll" in {
      "returns true when all elements match the given predicate" in {
        Stream(10,8,6,4,2).forAll(_ % 2 == 0) mustEqual true
      }

      "returns false when at least one element does not match the given predicate" in {
        Stream(10,8,1,4,2).forAll(_ % 2 == 0) mustEqual false
      }
    }
  }

  "5.5" in {
    "takeWhile2" in {
      "returns all the first elements that match the given predicate" in {
        Stream(10,8,6,4,3,2,1).takeWhile2(_ % 2 == 0).toList mustEqual List(10,8,6,4)
      }

      "returns empty stream when the first element does not match the given predicate" in {
        Stream(3,10,8,6,4,2).takeWhile2(_ % 2 == 0).toList mustEqual List()
      }
    }
  }

  "5.6" in {
    "headOption" in {
      "returns some value for non-empty stream" in {
        Stream(1,2,3).headOption2 mustEqual Some(1)
      }

      "returns none for empty stream" in {
        Stream.empty.headOption2 mustEqual None
      }
    }
  }

  "5.7" in {
    "map" in {
      "transforms one stream into another" in {
        Stream(1,2,3).map(_ + 1).toList mustEqual List(2,3,4)
      }

      "transforms empty stream into itself" in {
        Stream.empty[Int].map(_ + 1).toList mustEqual List()
      }
    }

    "filter" in {
      "returns all elements that matched the given predicate" in {
        Stream(10,9,8,7,6,5,4,3,2,1).filter(_ % 2 == 0).toList mustEqual List(10,8,6,4,2)
      }

      "returns empty stream when no elements matched the given predicate" in {
        Stream(9,7,5,3,1).filter(_ % 2 == 0).toList mustEqual List()
      }

      "returns empty stream when filtering empty stream" in {
        Stream.empty[Int].filter(_ % 2 == 0).toList mustEqual List()
      }
    }

    "append" in {
      "appends two streams" in {
        Stream(1,2).append(Stream(3,4)).toList mustEqual List(1,2,3,4)
      }

      "appends a stream into empty stream" in {
        Stream(1,2).append(Stream.empty).toList mustEqual List(1,2)
      }

      "appends empty stream into stream" in {
        Stream.empty.append(Stream(1,2)).toList mustEqual List(1,2)
      }

      "appends empty streams" in {
        Stream.empty.append(Stream.empty).toList mustEqual List()
      }
    }

    "flatMap" in {
      "transforms the stream into another" in {
        Stream(10,9,8,7,6).flatMap[Int](value => Stream(value + 1)).toList mustEqual List(11,10,9,8,7)
      }

      "transforms empty stream into itself" in {
        Stream.empty[Int].flatMap[Int](value => Stream(value + 1)).toList mustEqual List()
      }
    }
  }

  "5.8" in {
    "constant" in {
      "returns stream with constant value" in {
        Stream.constant(1).take(2).toList mustEqual List(1,1)
      }
    }
  }

  "5.9" in {
    "from" in {
      "returns int stream from given number" in {
        Stream.from(3).take(2).toList mustEqual List(3,4)
      }
    }
  }

  "5.10" in {
    "fibs" in {
      "returns stream with the fibonacci numbers" in {
        Fibs.fibs.take(7).toList mustEqual List(0,1,1,2,3,5,8)
      }
    }
  }

  "5.11" in {
    "unfold" in {
      "returns stream generated by given function" in {
        Stream.unfold(10)(value => if (value == 5) None else Some(value, value - 1)).toList mustEqual List(10,9,8,7,6)
      }
    }
  }

  "5.12" in {
    "fibs2" in {
      "returns stream with the fibonacci numbers" in {
        Fibs.fibs2.take(7).toList mustEqual List(0,1,1,2,3,5,8)
      }
    }

    "from2" in {
      "returns int stream from given number" in {
        Stream.from2(3).take(2).toList mustEqual List(3,4)
      }
    }

    "constant2" in {
      "returns stream with constant value" in {
        Stream.constant2("A").take(2).toList mustEqual List("A","A")
      }
    }

    "ones" in {
      "returns stream with ones" in {
        Ones.ones.take(2).toList mustEqual List(1,1)
      }
    }
  }
}
